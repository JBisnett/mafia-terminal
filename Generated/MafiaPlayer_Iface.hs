{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Generated.MafiaPlayer_Iface where
import qualified Control.Exception         as X
import qualified Control.Monad             as M (ap, liftM, when)
import qualified Data.ByteString.Lazy      as LBS
import           Data.Functor              ((<$>))
import qualified Data.Hashable             as H
import qualified Data.HashMap.Strict       as Map
import qualified Data.HashSet              as Set
import qualified Data.Int                  as I
import qualified Data.Maybe                as M (catMaybes)
import qualified Data.Text.Lazy            as LT
import qualified Data.Text.Lazy.Encoding   as E (decodeUtf8, encodeUtf8)
import qualified Data.Typeable             as TY (Typeable)
import qualified Data.Vector               as Vector
import qualified GHC.Generics              as G (Generic)
import           Prelude                   (($), (++), (.), (==), (>>=))
import qualified Prelude                   as P
import qualified Test.QuickCheck           as QC (elements)
import qualified Test.QuickCheck.Arbitrary as QC (Arbitrary (..))

import qualified Thrift                    as T
import qualified Thrift.Arbitraries        as T
import qualified Thrift.Types              as T


import           Generated.Mafia_Types

class MafiaPlayer_Iface a where
  ping :: a -> P.IO ()
  start_game :: a -> (Vector.Vector LT.Text) -> (Set.HashSet LT.Text) -> P.IO ()
  kill :: a -> LT.Text -> P.IO ()
  time_forward :: a -> P.IO ()
  server_message :: a -> LT.Text -> P.IO ()
  set_role :: a -> LT.Text -> P.IO ()
