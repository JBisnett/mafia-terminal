{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module MafiaPlayer where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Mafia_Types
import qualified MafiaPlayer_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Ping_args = Ping_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_args where 
  arbitrary = QC.elements [Ping_args]
from_Ping_args :: Ping_args -> T.ThriftVal
from_Ping_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_args :: (T.Protocol p, T.Transport t) => p t -> Ping_args -> P.IO ()
write_Ping_args oprot record = T.writeVal oprot $ from_Ping_args record
encode_Ping_args :: (T.Protocol p, T.Transport t) => p t -> Ping_args -> LBS.ByteString
encode_Ping_args oprot record = T.serializeVal oprot $ from_Ping_args record
to_Ping_args :: T.ThriftVal -> Ping_args
to_Ping_args (T.TStruct fields) = Ping_args{

  }
to_Ping_args _ = P.error "not a struct"
read_Ping_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Ping_args
read_Ping_args iprot = to_Ping_args <$> T.readVal iprot (T.T_STRUCT typemap_Ping_args)
decode_Ping_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Ping_args
decode_Ping_args iprot bs = to_Ping_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_args) bs
typemap_Ping_args :: T.TypeMap
typemap_Ping_args = Map.fromList []
default_Ping_args :: Ping_args
default_Ping_args = Ping_args{
}
data Ping_result = Ping_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_result where 
  arbitrary = QC.elements [Ping_result]
from_Ping_result :: Ping_result -> T.ThriftVal
from_Ping_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_result :: (T.Protocol p, T.Transport t) => p t -> Ping_result -> P.IO ()
write_Ping_result oprot record = T.writeVal oprot $ from_Ping_result record
encode_Ping_result :: (T.Protocol p, T.Transport t) => p t -> Ping_result -> LBS.ByteString
encode_Ping_result oprot record = T.serializeVal oprot $ from_Ping_result record
to_Ping_result :: T.ThriftVal -> Ping_result
to_Ping_result (T.TStruct fields) = Ping_result{

  }
to_Ping_result _ = P.error "not a struct"
read_Ping_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Ping_result
read_Ping_result iprot = to_Ping_result <$> T.readVal iprot (T.T_STRUCT typemap_Ping_result)
decode_Ping_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Ping_result
decode_Ping_result iprot bs = to_Ping_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_result) bs
typemap_Ping_result :: T.TypeMap
typemap_Ping_result = Map.fromList []
default_Ping_result :: Ping_result
default_Ping_result = Ping_result{
}
data Start_game_args = Start_game_args  { start_game_args_player_names :: (Vector.Vector LT.Text)
  , start_game_args_modifiers :: (Set.HashSet LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Start_game_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` start_game_args_player_names record   `H.hashWithSalt` start_game_args_modifiers record  
instance QC.Arbitrary Start_game_args where 
  arbitrary = M.liftM Start_game_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Start_game_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Start_game_args{start_game_args_player_names = start_game_args_player_names obj} then P.Nothing else P.Just $ default_Start_game_args{start_game_args_player_names = start_game_args_player_names obj}
    , if obj == default_Start_game_args{start_game_args_modifiers = start_game_args_modifiers obj} then P.Nothing else P.Just $ default_Start_game_args{start_game_args_modifiers = start_game_args_modifiers obj}
    ]
from_Start_game_args :: Start_game_args -> T.ThriftVal
from_Start_game_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v87 -> P.Just (1, ("player_names",T.TList T.T_STRING $ P.map (\_v89 -> T.TString $ E.encodeUtf8 _v89) $ Vector.toList _v87))) $ start_game_args_player_names record
  , (\_v87 -> P.Just (2, ("modifiers",T.TSet T.T_STRING $ P.map (\_v91 -> T.TString $ E.encodeUtf8 _v91) $ Set.toList _v87))) $ start_game_args_modifiers record
  ]
write_Start_game_args :: (T.Protocol p, T.Transport t) => p t -> Start_game_args -> P.IO ()
write_Start_game_args oprot record = T.writeVal oprot $ from_Start_game_args record
encode_Start_game_args :: (T.Protocol p, T.Transport t) => p t -> Start_game_args -> LBS.ByteString
encode_Start_game_args oprot record = T.serializeVal oprot $ from_Start_game_args record
to_Start_game_args :: T.ThriftVal -> Start_game_args
to_Start_game_args (T.TStruct fields) = Start_game_args{
  start_game_args_player_names = P.maybe (start_game_args_player_names default_Start_game_args) (\(_,_val93) -> (case _val93 of {T.TList _ _val94 -> (Vector.fromList $ P.map (\_v95 -> (case _v95 of {T.TString _val96 -> E.decodeUtf8 _val96; _ -> P.error "wrong type"})) _val94); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  start_game_args_modifiers = P.maybe (start_game_args_modifiers default_Start_game_args) (\(_,_val93) -> (case _val93 of {T.TSet _ _val97 -> (Set.fromList $ P.map (\_v98 -> (case _v98 of {T.TString _val99 -> E.decodeUtf8 _val99; _ -> P.error "wrong type"})) _val97); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Start_game_args _ = P.error "not a struct"
read_Start_game_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Start_game_args
read_Start_game_args iprot = to_Start_game_args <$> T.readVal iprot (T.T_STRUCT typemap_Start_game_args)
decode_Start_game_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Start_game_args
decode_Start_game_args iprot bs = to_Start_game_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Start_game_args) bs
typemap_Start_game_args :: T.TypeMap
typemap_Start_game_args = Map.fromList [(1,("player_names",(T.T_LIST T.T_STRING))),(2,("modifiers",(T.T_SET T.T_STRING)))]
default_Start_game_args :: Start_game_args
default_Start_game_args = Start_game_args{
  start_game_args_player_names = Vector.empty,
  start_game_args_modifiers = Set.empty}
data Start_game_result = Start_game_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Start_game_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Start_game_result where 
  arbitrary = QC.elements [Start_game_result]
from_Start_game_result :: Start_game_result -> T.ThriftVal
from_Start_game_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Start_game_result :: (T.Protocol p, T.Transport t) => p t -> Start_game_result -> P.IO ()
write_Start_game_result oprot record = T.writeVal oprot $ from_Start_game_result record
encode_Start_game_result :: (T.Protocol p, T.Transport t) => p t -> Start_game_result -> LBS.ByteString
encode_Start_game_result oprot record = T.serializeVal oprot $ from_Start_game_result record
to_Start_game_result :: T.ThriftVal -> Start_game_result
to_Start_game_result (T.TStruct fields) = Start_game_result{

  }
to_Start_game_result _ = P.error "not a struct"
read_Start_game_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Start_game_result
read_Start_game_result iprot = to_Start_game_result <$> T.readVal iprot (T.T_STRUCT typemap_Start_game_result)
decode_Start_game_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Start_game_result
decode_Start_game_result iprot bs = to_Start_game_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Start_game_result) bs
typemap_Start_game_result :: T.TypeMap
typemap_Start_game_result = Map.fromList []
default_Start_game_result :: Start_game_result
default_Start_game_result = Start_game_result{
}
data Kill_args = Kill_args  { kill_args_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Kill_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` kill_args_message record  
instance QC.Arbitrary Kill_args where 
  arbitrary = M.liftM Kill_args (QC.arbitrary)
  shrink obj | obj == default_Kill_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Kill_args{kill_args_message = kill_args_message obj} then P.Nothing else P.Just $ default_Kill_args{kill_args_message = kill_args_message obj}
    ]
from_Kill_args :: Kill_args -> T.ThriftVal
from_Kill_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v107 -> P.Just (1, ("message",T.TString $ E.encodeUtf8 _v107))) $ kill_args_message record
  ]
write_Kill_args :: (T.Protocol p, T.Transport t) => p t -> Kill_args -> P.IO ()
write_Kill_args oprot record = T.writeVal oprot $ from_Kill_args record
encode_Kill_args :: (T.Protocol p, T.Transport t) => p t -> Kill_args -> LBS.ByteString
encode_Kill_args oprot record = T.serializeVal oprot $ from_Kill_args record
to_Kill_args :: T.ThriftVal -> Kill_args
to_Kill_args (T.TStruct fields) = Kill_args{
  kill_args_message = P.maybe (kill_args_message default_Kill_args) (\(_,_val109) -> (case _val109 of {T.TString _val110 -> E.decodeUtf8 _val110; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Kill_args _ = P.error "not a struct"
read_Kill_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Kill_args
read_Kill_args iprot = to_Kill_args <$> T.readVal iprot (T.T_STRUCT typemap_Kill_args)
decode_Kill_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Kill_args
decode_Kill_args iprot bs = to_Kill_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Kill_args) bs
typemap_Kill_args :: T.TypeMap
typemap_Kill_args = Map.fromList [(1,("message",T.T_STRING))]
default_Kill_args :: Kill_args
default_Kill_args = Kill_args{
  kill_args_message = ""}
data Kill_result = Kill_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Kill_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Kill_result where 
  arbitrary = QC.elements [Kill_result]
from_Kill_result :: Kill_result -> T.ThriftVal
from_Kill_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Kill_result :: (T.Protocol p, T.Transport t) => p t -> Kill_result -> P.IO ()
write_Kill_result oprot record = T.writeVal oprot $ from_Kill_result record
encode_Kill_result :: (T.Protocol p, T.Transport t) => p t -> Kill_result -> LBS.ByteString
encode_Kill_result oprot record = T.serializeVal oprot $ from_Kill_result record
to_Kill_result :: T.ThriftVal -> Kill_result
to_Kill_result (T.TStruct fields) = Kill_result{

  }
to_Kill_result _ = P.error "not a struct"
read_Kill_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Kill_result
read_Kill_result iprot = to_Kill_result <$> T.readVal iprot (T.T_STRUCT typemap_Kill_result)
decode_Kill_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Kill_result
decode_Kill_result iprot bs = to_Kill_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Kill_result) bs
typemap_Kill_result :: T.TypeMap
typemap_Kill_result = Map.fromList []
default_Kill_result :: Kill_result
default_Kill_result = Kill_result{
}
data Time_forward_args = Time_forward_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Time_forward_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Time_forward_args where 
  arbitrary = QC.elements [Time_forward_args]
from_Time_forward_args :: Time_forward_args -> T.ThriftVal
from_Time_forward_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Time_forward_args :: (T.Protocol p, T.Transport t) => p t -> Time_forward_args -> P.IO ()
write_Time_forward_args oprot record = T.writeVal oprot $ from_Time_forward_args record
encode_Time_forward_args :: (T.Protocol p, T.Transport t) => p t -> Time_forward_args -> LBS.ByteString
encode_Time_forward_args oprot record = T.serializeVal oprot $ from_Time_forward_args record
to_Time_forward_args :: T.ThriftVal -> Time_forward_args
to_Time_forward_args (T.TStruct fields) = Time_forward_args{

  }
to_Time_forward_args _ = P.error "not a struct"
read_Time_forward_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Time_forward_args
read_Time_forward_args iprot = to_Time_forward_args <$> T.readVal iprot (T.T_STRUCT typemap_Time_forward_args)
decode_Time_forward_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Time_forward_args
decode_Time_forward_args iprot bs = to_Time_forward_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Time_forward_args) bs
typemap_Time_forward_args :: T.TypeMap
typemap_Time_forward_args = Map.fromList []
default_Time_forward_args :: Time_forward_args
default_Time_forward_args = Time_forward_args{
}
data Time_forward_result = Time_forward_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Time_forward_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Time_forward_result where 
  arbitrary = QC.elements [Time_forward_result]
from_Time_forward_result :: Time_forward_result -> T.ThriftVal
from_Time_forward_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Time_forward_result :: (T.Protocol p, T.Transport t) => p t -> Time_forward_result -> P.IO ()
write_Time_forward_result oprot record = T.writeVal oprot $ from_Time_forward_result record
encode_Time_forward_result :: (T.Protocol p, T.Transport t) => p t -> Time_forward_result -> LBS.ByteString
encode_Time_forward_result oprot record = T.serializeVal oprot $ from_Time_forward_result record
to_Time_forward_result :: T.ThriftVal -> Time_forward_result
to_Time_forward_result (T.TStruct fields) = Time_forward_result{

  }
to_Time_forward_result _ = P.error "not a struct"
read_Time_forward_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Time_forward_result
read_Time_forward_result iprot = to_Time_forward_result <$> T.readVal iprot (T.T_STRUCT typemap_Time_forward_result)
decode_Time_forward_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Time_forward_result
decode_Time_forward_result iprot bs = to_Time_forward_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Time_forward_result) bs
typemap_Time_forward_result :: T.TypeMap
typemap_Time_forward_result = Map.fromList []
default_Time_forward_result :: Time_forward_result
default_Time_forward_result = Time_forward_result{
}
data Server_message_args = Server_message_args  { server_message_args_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Server_message_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` server_message_args_message record  
instance QC.Arbitrary Server_message_args where 
  arbitrary = M.liftM Server_message_args (QC.arbitrary)
  shrink obj | obj == default_Server_message_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Server_message_args{server_message_args_message = server_message_args_message obj} then P.Nothing else P.Just $ default_Server_message_args{server_message_args_message = server_message_args_message obj}
    ]
from_Server_message_args :: Server_message_args -> T.ThriftVal
from_Server_message_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v128 -> P.Just (1, ("message",T.TString $ E.encodeUtf8 _v128))) $ server_message_args_message record
  ]
write_Server_message_args :: (T.Protocol p, T.Transport t) => p t -> Server_message_args -> P.IO ()
write_Server_message_args oprot record = T.writeVal oprot $ from_Server_message_args record
encode_Server_message_args :: (T.Protocol p, T.Transport t) => p t -> Server_message_args -> LBS.ByteString
encode_Server_message_args oprot record = T.serializeVal oprot $ from_Server_message_args record
to_Server_message_args :: T.ThriftVal -> Server_message_args
to_Server_message_args (T.TStruct fields) = Server_message_args{
  server_message_args_message = P.maybe (server_message_args_message default_Server_message_args) (\(_,_val130) -> (case _val130 of {T.TString _val131 -> E.decodeUtf8 _val131; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Server_message_args _ = P.error "not a struct"
read_Server_message_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Server_message_args
read_Server_message_args iprot = to_Server_message_args <$> T.readVal iprot (T.T_STRUCT typemap_Server_message_args)
decode_Server_message_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Server_message_args
decode_Server_message_args iprot bs = to_Server_message_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Server_message_args) bs
typemap_Server_message_args :: T.TypeMap
typemap_Server_message_args = Map.fromList [(1,("message",T.T_STRING))]
default_Server_message_args :: Server_message_args
default_Server_message_args = Server_message_args{
  server_message_args_message = ""}
data Server_message_result = Server_message_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Server_message_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Server_message_result where 
  arbitrary = QC.elements [Server_message_result]
from_Server_message_result :: Server_message_result -> T.ThriftVal
from_Server_message_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Server_message_result :: (T.Protocol p, T.Transport t) => p t -> Server_message_result -> P.IO ()
write_Server_message_result oprot record = T.writeVal oprot $ from_Server_message_result record
encode_Server_message_result :: (T.Protocol p, T.Transport t) => p t -> Server_message_result -> LBS.ByteString
encode_Server_message_result oprot record = T.serializeVal oprot $ from_Server_message_result record
to_Server_message_result :: T.ThriftVal -> Server_message_result
to_Server_message_result (T.TStruct fields) = Server_message_result{

  }
to_Server_message_result _ = P.error "not a struct"
read_Server_message_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Server_message_result
read_Server_message_result iprot = to_Server_message_result <$> T.readVal iprot (T.T_STRUCT typemap_Server_message_result)
decode_Server_message_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Server_message_result
decode_Server_message_result iprot bs = to_Server_message_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Server_message_result) bs
typemap_Server_message_result :: T.TypeMap
typemap_Server_message_result = Map.fromList []
default_Server_message_result :: Server_message_result
default_Server_message_result = Server_message_result{
}
data Set_role_args = Set_role_args  { set_role_args_role :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Set_role_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` set_role_args_role record  
instance QC.Arbitrary Set_role_args where 
  arbitrary = M.liftM Set_role_args (QC.arbitrary)
  shrink obj | obj == default_Set_role_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Set_role_args{set_role_args_role = set_role_args_role obj} then P.Nothing else P.Just $ default_Set_role_args{set_role_args_role = set_role_args_role obj}
    ]
from_Set_role_args :: Set_role_args -> T.ThriftVal
from_Set_role_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v139 -> P.Just (1, ("role",T.TString $ E.encodeUtf8 _v139))) $ set_role_args_role record
  ]
write_Set_role_args :: (T.Protocol p, T.Transport t) => p t -> Set_role_args -> P.IO ()
write_Set_role_args oprot record = T.writeVal oprot $ from_Set_role_args record
encode_Set_role_args :: (T.Protocol p, T.Transport t) => p t -> Set_role_args -> LBS.ByteString
encode_Set_role_args oprot record = T.serializeVal oprot $ from_Set_role_args record
to_Set_role_args :: T.ThriftVal -> Set_role_args
to_Set_role_args (T.TStruct fields) = Set_role_args{
  set_role_args_role = P.maybe (set_role_args_role default_Set_role_args) (\(_,_val141) -> (case _val141 of {T.TString _val142 -> E.decodeUtf8 _val142; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Set_role_args _ = P.error "not a struct"
read_Set_role_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Set_role_args
read_Set_role_args iprot = to_Set_role_args <$> T.readVal iprot (T.T_STRUCT typemap_Set_role_args)
decode_Set_role_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Set_role_args
decode_Set_role_args iprot bs = to_Set_role_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Set_role_args) bs
typemap_Set_role_args :: T.TypeMap
typemap_Set_role_args = Map.fromList [(1,("role",T.T_STRING))]
default_Set_role_args :: Set_role_args
default_Set_role_args = Set_role_args{
  set_role_args_role = ""}
data Set_role_result = Set_role_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Set_role_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Set_role_result where 
  arbitrary = QC.elements [Set_role_result]
from_Set_role_result :: Set_role_result -> T.ThriftVal
from_Set_role_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Set_role_result :: (T.Protocol p, T.Transport t) => p t -> Set_role_result -> P.IO ()
write_Set_role_result oprot record = T.writeVal oprot $ from_Set_role_result record
encode_Set_role_result :: (T.Protocol p, T.Transport t) => p t -> Set_role_result -> LBS.ByteString
encode_Set_role_result oprot record = T.serializeVal oprot $ from_Set_role_result record
to_Set_role_result :: T.ThriftVal -> Set_role_result
to_Set_role_result (T.TStruct fields) = Set_role_result{

  }
to_Set_role_result _ = P.error "not a struct"
read_Set_role_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Set_role_result
read_Set_role_result iprot = to_Set_role_result <$> T.readVal iprot (T.T_STRUCT typemap_Set_role_result)
decode_Set_role_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Set_role_result
decode_Set_role_result iprot bs = to_Set_role_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Set_role_result) bs
typemap_Set_role_result :: T.TypeMap
typemap_Set_role_result = Map.fromList []
default_Set_role_result :: Set_role_result
default_Set_role_result = Set_role_result{
}
process_ping (seqid, iprot, oprot, handler) = do
  args <- read_Ping_args iprot
  (X.catch
    (do
      Iface.ping handler
      let res = default_Ping_result
      T.writeMessageBegin oprot ("ping", T.M_REPLY, seqid)
      write_Ping_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("ping", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_start_game (seqid, iprot, oprot, handler) = do
  args <- read_Start_game_args iprot
  (X.catch
    (do
      Iface.start_game handler (start_game_args_player_names args) (start_game_args_modifiers args)
      let res = default_Start_game_result
      T.writeMessageBegin oprot ("start_game", T.M_REPLY, seqid)
      write_Start_game_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("start_game", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_kill (seqid, iprot, oprot, handler) = do
  args <- read_Kill_args iprot
  (X.catch
    (do
      Iface.kill handler (kill_args_message args)
      let res = default_Kill_result
      T.writeMessageBegin oprot ("kill", T.M_REPLY, seqid)
      write_Kill_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("kill", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_time_forward (seqid, iprot, oprot, handler) = do
  args <- read_Time_forward_args iprot
  (X.catch
    (do
      Iface.time_forward handler
      let res = default_Time_forward_result
      T.writeMessageBegin oprot ("time_forward", T.M_REPLY, seqid)
      write_Time_forward_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("time_forward", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_server_message (seqid, iprot, oprot, handler) = do
  args <- read_Server_message_args iprot
  (X.catch
    (do
      Iface.server_message handler (server_message_args_message args)
      let res = default_Server_message_result
      T.writeMessageBegin oprot ("server_message", T.M_REPLY, seqid)
      write_Server_message_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("server_message", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_set_role (seqid, iprot, oprot, handler) = do
  args <- read_Set_role_args iprot
  (X.catch
    (do
      Iface.set_role handler (set_role_args_role args)
      let res = default_Set_role_result
      T.writeMessageBegin oprot ("set_role", T.M_REPLY, seqid)
      write_Set_role_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("set_role", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "ping" -> process_ping (seqid,iprot,oprot,handler)
  "start_game" -> process_start_game (seqid,iprot,oprot,handler)
  "kill" -> process_kill (seqid,iprot,oprot,handler)
  "time_forward" -> process_time_forward (seqid,iprot,oprot,handler)
  "server_message" -> process_server_message (seqid,iprot,oprot,handler)
  "set_role" -> process_set_role (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
