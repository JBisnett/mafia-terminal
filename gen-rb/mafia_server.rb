#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'mafia_types'

module RocHack
  module Mafia
    module MafiaServer
      class Client
        include ::Thrift::Client

        def join_game(name, host, port)
          send_join_game(name, host, port)
          return recv_join_game()
        end

        def send_join_game(name, host, port)
          send_message('join_game', Join_game_args, :name => name, :host => host, :port => port)
        end

        def recv_join_game()
          result = receive_message(Join_game_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'join_game failed: unknown result')
        end

        def take_action(action, target)
          send_take_action(action, target)
          return recv_take_action()
        end

        def send_take_action(action, target)
          send_message('take_action', Take_action_args, :action => action, :target => target)
        end

        def recv_take_action()
          result = receive_message(Take_action_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'take_action failed: unknown result')
        end

        def public_message(message)
          send_public_message(message)
          return recv_public_message()
        end

        def send_public_message(message)
          send_message('public_message', Public_message_args, :message => message)
        end

        def recv_public_message()
          result = receive_message(Public_message_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'public_message failed: unknown result')
        end

        def group_message(group_id, message)
          send_group_message(group_id, message)
          return recv_group_message()
        end

        def send_group_message(group_id, message)
          send_message('group_message', Group_message_args, :group_id => group_id, :message => message)
        end

        def recv_group_message()
          result = receive_message(Group_message_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'group_message failed: unknown result')
        end

        def private_message(player_name, message)
          send_private_message(player_name, message)
          return recv_private_message()
        end

        def send_private_message(player_name, message)
          send_message('private_message', Private_message_args, :player_name => player_name, :message => message)
        end

        def recv_private_message()
          result = receive_message(Private_message_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'private_message failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_join_game(seqid, iprot, oprot)
          args = read_args(iprot, Join_game_args)
          result = Join_game_result.new()
          result.success = @handler.join_game(args.name, args.host, args.port)
          write_result(result, oprot, 'join_game', seqid)
        end

        def process_take_action(seqid, iprot, oprot)
          args = read_args(iprot, Take_action_args)
          result = Take_action_result.new()
          result.success = @handler.take_action(args.action, args.target)
          write_result(result, oprot, 'take_action', seqid)
        end

        def process_public_message(seqid, iprot, oprot)
          args = read_args(iprot, Public_message_args)
          result = Public_message_result.new()
          result.success = @handler.public_message(args.message)
          write_result(result, oprot, 'public_message', seqid)
        end

        def process_group_message(seqid, iprot, oprot)
          args = read_args(iprot, Group_message_args)
          result = Group_message_result.new()
          result.success = @handler.group_message(args.group_id, args.message)
          write_result(result, oprot, 'group_message', seqid)
        end

        def process_private_message(seqid, iprot, oprot)
          args = read_args(iprot, Private_message_args)
          result = Private_message_result.new()
          result.success = @handler.private_message(args.player_name, args.message)
          write_result(result, oprot, 'private_message', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Join_game_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HOST = 2
        PORT = 3

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
          PORT => {:type => ::Thrift::Types::I32, :name => 'port'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Join_game_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Take_action_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ACTION = 1
        TARGET = 2

        FIELDS = {
          ACTION => {:type => ::Thrift::Types::I32, :name => 'action'},
          TARGET => {:type => ::Thrift::Types::STRING, :name => 'target'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Take_action_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Public_message_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MESSAGE = 1

        FIELDS = {
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Public_message_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Group_message_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        GROUP_ID = 1
        MESSAGE = 2

        FIELDS = {
          GROUP_ID => {:type => ::Thrift::Types::I32, :name => 'group_id'},
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Group_message_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Private_message_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PLAYER_NAME = 1
        MESSAGE = 2

        FIELDS = {
          PLAYER_NAME => {:type => ::Thrift::Types::STRING, :name => 'player_name'},
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Private_message_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
